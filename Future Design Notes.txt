Second address mux:
	- speed_sel 00 is system_controller
	- speed_sel others is the address counter (to be written).

Address counter:
	- Must vary the increment amount based on speed_sel to get 60, 120, 1000 hz
	- Might run at 12 KHz (could be as low as 3 KHz).  The amount it increments could be an address every 12, 100, 200 cycles (1000, 120, 60 hz)
	- This is if the SRAM can read this quickly, which 1/80ns = 12.5 MHz so should be good
	- Presumably the PWM device should run at this same speed?
	- Therefore need a clk_en signal whatever rate we choose.  The address_counter would have a increment_sel mux based on speed_sel to make the address change at whatever rate we want
	- The address is the top 8 out of 32 bits, so the increment_sel mux chooses a whole number that is 1/12, 1/100, 1/200 the value of the LSB of the top bytecisc
	
DONE:
Must write address_counter - Aaron
Must finish filter - Cameron
Must write I2C controller - Aaron
Must make top_level connections (both muxes will be contained in this) - Weston & Aaron
Must finish DE2_115 connections - Aaron
Redesign of LCD_user logic: - DONE
	- Make an en pulse to start the transmission.  This builds in the pause to the system_controller so things refresh exactly when needed.
		- system_controller needs to be updated to send this pulse--OR clk_en_1 and an internal signal.  This allows us to force the refresh when modes are changed, etc.
	- Init:  bytes 0 - 21
	- Test:  bytes 22 - 47
	- Pause: bytes 48 - 74
	- PWM60: bytes 75 - 96
	- PWM12: Bytes 75 - 91; 97 - 102
	- PWM10: Bytes 75 - 91; 103 - 109
Debugging:
	- PWM Frequencies - hopefully good
	- PWM on/off: abuse the clk_en pin
	- LCD Refresh - fix when under reset
	- Make it run off of the SRAM again

IN PROGRESS:
Debugging (obviously)
	- i2c at all

NOT STARTED:
