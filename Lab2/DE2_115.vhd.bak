LIBRARY ieee;
   USE ieee.std_logic_1164.all;

ENTITY DE2_115 IS
   PORT (
 -- 			Clock Input	
		CLOCK_50    : IN STD_LOGIC;								-- On Board 50 MHz
-- 			Push Button		      
		KEY         : IN STD_LOGIC_VECTOR(3 DOWNTO 0);		-- Pushbutton[3:0]
-- 			

-- 			LED		      
		LEDG         : OUT STD_LOGIC_VECTOR(8 DOWNTO 0);		-- LED [8:0]

  
-- 			SRAM Interface		      
		SRAM_DQ     : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);		-- SRAM Data bus 16 Bits
		SRAM_ADDR   : OUT STD_LOGIC_VECTOR(19 DOWNTO 0);		-- SRAM Address bus 20 Bits
		SRAM_UB_N   : OUT STD_LOGIC;									-- SRAM High-byte Data Mask
		SRAM_LB_N   : OUT STD_LOGIC;									-- SRAM Low-byte Data Mask
		SRAM_WE_N   : OUT STD_LOGIC;									-- SRAM Write Enable
		SRAM_CE_N   : OUT STD_LOGIC;									-- SRAM Chip Enable
		SRAM_OE_N   : OUT STD_LOGIC;									-- SRAM Output Enable

-- 			GPIO	      
		GPIO       	: INOUT STD_LOGIC_VECTOR(35 DOWNTO 0);	-- GPIO Connection 0
--	   	

--			HEX

		HEX0		: OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		HEX1		: OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		HEX2		: OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		HEX3		: OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		HEX4		: OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		HEX5		: OUT STD_LOGIC_VECTOR(6 DOWNTO 0)	                                                                                                    
   );
END DE2_115;

ARCHITECTURE structural OF DE2_115 IS

-- TOP LEVEL COMPONENT

component top_level is
		port (
		clk_50				: in std_logic; 
		reset				: in std_logic; 
		
		mode_led 			: out std_logic;
		
		keypad_rows 		: in std_logic_vector(4 downto 0);
		keypad_col			: out std_logic_vector(3 downto 0);
		
		sram_io				: inout std_logic_vector(15 downto 0);
		sram_address		: out std_logic_vector(19 downto 0);	
		sram_we_n			: out std_logic;
		sram_oe_n			: out std_logic;
		sram_ce_n			: out std_logic;
		sram_lb_n			: out std_logic;
		sram_ub_n			: out std_logic;
		
		hex_0				: out std_logic_vector(6 downto 0);
		hex_1				: out std_logic_vector(6 downto 0);
		hex_2				: out std_logic_vector(6 downto 0);
		hex_3				: out std_logic_vector(6 downto 0);
		hex_4				: out std_logic_vector(6 downto 0);
		hex_5				: out std_logic_vector(6 downto 0)		
		);
end component top_level;

signal rows : std_logic_vector (4 downto 0);
signal cols : std_logic_vector (3 downto 0);

BEGIN
 

rows <= GPIO(8 downto 4);
GPIO(3 downto 0) <= cols;
	
-- INSTANTIATION OF THE TOP LEVEL COMPONENT

Inst_top_level: top_level 
      port map(		
			clk_50 => CLOCK_50,
			reset => KEY(0),
			mode_led => LEDG(0),
			--keypad_rows => GPIO(8 downto 4),
			keypad_rows => rows,
	--		keypad_rows[0] => GPIO[0],
	--		keypad_rows[1] => GPIO[1],
	--		keypad_rows[2] => GPIO[2],
	--		keypad_rows[3] => GPIO[3],
	--		keypad_rows[4] => GPIO[4],
			--keypad_col => GPIO(3 downto 0),
			keypad_col => cols,
	--		keypad_col[0] => GPIO[5],
	--		keypad_col[1] => GPIO[6],
	--		keypad_col[2] => GPIO[7],
	--		keypad_col[3] => GPIO[8],
			sram_io => SRAM_DQ,
	--		sram_io[0] => SRAM_DQ[0],
	--		sram_io[1] => SRAM_DQ[1],
	--		sram_io[2] => SRAM_DQ[2],
	--		sram_io[3] => SRAM_DQ[3],
	--		sram_io[4] => SRAM_DQ[4],
	--		sram_io[5] => SRAM_DQ[5],
	--		sram_io[6] => SRAM_DQ[6],
	--		sram_io[7] => SRAM_DQ[7],
	--		sram_io[8] => SRAM_DQ[8],
	--		sram_io[9] => SRAM_DQ[9],
	--		sram_io[10] => SRAM_DQ[10],
	--		sram_io[11] => SRAM_DQ[11],
	--		sram_io[12] => SRAM_DQ[12],
	--		sram_io[13] => SRAM_DQ[13],
	--		sram_io[14] => SRAM_DQ[14],
	--		sram_io[15] => SRAM_DQ[15],
			sram_address => SRAM_ADDR,
	--		sram_address[0] => SRAM_ADDR[0],
	--		sram_address[1] => SRAM_ADDR[1],
	--		sram_address[2] => SRAM_ADDR[2],
	--		sram_address[3] => SRAM_ADDR[3],
	--		sram_address[4] => SRAM_ADDR[4],
	--		sram_address[5] => SRAM_ADDR[5],
	--		sram_address[6] => SRAM_ADDR[6],
	--		sram_address[7] => SRAM_ADDR[7],
	--		sram_address[8] => SRAM_ADDR[8],
	--		sram_address[9] => SRAM_ADDR[9],
	--		sram_address[10] => SRAM_ADDR[10],
	--		sram_address[11] => SRAM_ADDR[11],
	--		sram_address[12] => SRAM_ADDR[12],
	--		sram_address[13] => SRAM_ADDR[13],
	--		sram_address[14] => SRAM_ADDR[14],
	--		sram_address[15] => SRAM_ADDR[15],
	--		sram_address[16] => SRAM_ADDR[16],
	--		sram_address[17] => SRAM_ADDR[17],
	--		sram_address[18] => SRAM_ADDR[18],
	--		sram_address[19] => SRAM_ADDR[19],
			sram_we_n	=> SRAM_WE_N,
			sram_ce_n => SRAM_CE_N,
			sram_oe_n => SRAM_OE_N,
			sram_lb_n => SRAM_LB_N,
			sram_ub_n => SRAM_UB_N,
			hex_0 => HEX0,
			hex_1 => HEX1,
			hex_2 => HEX2,
			hex_3 => HEX3,
			hex_4 => HEX4,
			hex_5 => HEX5
	--		hex_0[0] => HEX0[0],
	--		hex_0[1] => HEX0[1],
	--		hex_0[2] => HEX0[2],
	--		hex_0[3] => HEX0[3],
	--		hex_0[4] => HEX0[4],
	--		hex_0[5] => HEX0[5],
	--		hex_0[6] => HEX0[6],
	--		hex_1[0] => HEX1[0],
	--		hex_1[1] => HEX1[1],
	--		hex_1[2] => HEX1[2],
	--		hex_1[3] => HEX1[3],
	--		hex_1[4] => HEX1[4],
	--		hex_1[5] => HEX1[5],
	--		hex_1[6] => HEX1[6],
	--		hex_2[0] => HEX2[0],
	--		hex_2[1] => HEX2[1],
	--		hex_2[2] => HEX2[2],
	--		hex_2[3] => HEX2[3],
	--		hex_2[4] => HEX2[4],
	--		hex_2[5] => HEX2[5],
	--		hex_2[6] => HEX2[6],
	--		hex_3[0] => HEX3[0],
	--		hex_3[1] => HEX3[1],
	--		hex_3[2] => HEX3[2],
	--		hex_3[3] => HEX3[3],
	--		hex_3[4] => HEX3[4],
	--		hex_3[5] => HEX3[5],
	--		hex_4[6] => HEX3[6],
	--		hex_4[0] => HEX4[0],
	--		hex_4[1] => HEX4[1],
	--		hex_4[2] => HEX4[2],
	--		hex_4[3] => HEX4[3],
	--		hex_4[4] => HEX4[4],
	--		hex_4[5] => HEX4[5],
	--		hex_4[6] => HEX4[6],
	--		hex_5[0] => HEX5[0],
	--		hex_5[1] => HEX5[1],
	--		hex_5[2] => HEX5[2],
	--		hex_5[3] => HEX5[3],
	--		hex_5[4] => HEX5[4],
	--		hex_5[5] => HEX5[5],
	--		hex_5[6] => HEX5[6]
		);

		
END structural;



